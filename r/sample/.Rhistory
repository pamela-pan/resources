test_abalone <- abalone[-ind, ]
model <- randomForest(Age~., data = train_abalone)
Error in randomForest.default(m, y, ...) : NA/NaN/Inf in foreign function call (arg 1)
View(abalone)
rm(list = ls())
library(randomForest)
abalone <- read_csv("abalone.data", col_names = FALSE)
names(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_weight", "Shucked_weight", "Viscera_weight", "Shell_weight", "Rings")
abalone$Age <- abalone$Rings + 1.5
abalone$Sex <- as.factor(abalone$Sex)
set.seed(4321)
ind <- sample(nrow(abalone), 0.75*nrow(abalone))
train_abalone <- abalone[ind, ]
test_abalone <- abalone[-ind, ]
model <- randomForest(Age~., data = train_abalone)
model
prediction <- predict(model, newdata = test_abalone)
table(prediction, test_abalone$Age)
accuracy <- mean(prediction == test_abalone$Age)
accuracy
prediction
mean(prediction)
mean(test_abalone$Age)
53+96
?knn
library(class)
?knn
149/160
summary(prediction)
summary(prediction)
summary(test_abalone$Age)
plot(test_abalone$Age)
plot(prediction)
install.packages("e1071")
model
model
setwd("~/Desktop/untitled folder/lec5")
rm(list = ls())
library(readr)
library(dplyr)
library(stringr)
library(tm)
library(e1071)
library(caret)
psy <- read_csv("Youtube01-Psy.csv")
kp <- read_csv("Youtube02-KatyPerry.csv")
lmfao <- read_csv("Youtube03-LMFAO.csv")
shakira <- read_csv("Youtube05-Shakira.csv")
eminem  <- read_csv("Youtube04-Eminem.csv")
eminem$flag <- 1
whole <- bind_rows(kp, lmfao, psy, shakira, eminem)
whole <- whole %>% distinct() ## remove duplicates
whole$CLASS <- as.factor(whole$CLASS)
## converting to lower cases
whole$CONTENT <- tolower(whole$CONTENT)
## removing stop words
stop <- removeWords(whole$CONTENT, stopwords("en"))
## turning puctuations to whitespaces
punc <- gsub(pattern="[[:punct:]]", stop, replacement = " ")
## splitting by whitespaces
n_char_vec <- unlist(strsplit(punc, split = " "))
freq <- findMostFreqTerms(termFreq(n_char_vec), n = 20)
freq
labels <- names(freq)
for (i in 1:length(labels)){
detect <- str_detect(whole$CONTENT, labels[i])
whole <- cbind(whole, assign(labels[i], detect))
}
train <- whole[is.na(whole$flag), -c(1:4, 6)] ## removing id, author, datetime, comments, flag
test <- whole[!is.na(whole$flag), -c(1:4, 6)]
model <- naiveBayes(CLASS ~., data = train, laplace = 1)
prediction <- predict(model, newdata = test)
confusionMatrix(prediction, test$CLASS)
model
View(whole)
names(whole)[7:26] <- labels
model2 <- naiveBayes(CLASS ~., data = train)
prediction <- predict(model2, newdata = test)
confusionMatrix(prediction, test$CLASS)
model[[1]]
model[[2]]
model[[3]]
model[[4]]
model[[5]]
747+760
747/1507
table(train$CLASS)
model[[2]][1]
View(whole)
?cor
?ttest
t.test
cor(mtcar[,1:3])
cor(mtcars[,1:3])
lm(mpg ~ cyl, data = mtcars)
lm(mpg ~ cyl + disp, data = mtcars)
lm(mpg ~ cyl : disp, data = mtcars)
lm(mpg ~ cyl * disp, data = mtcars)
model <- lm(mpg ~ cyl, data = mtcars)
summary(model)$coefficient
mtcars
?t.test
t.test(mpg ~ cyl[cyl == 4 | cyl == 6], data = mtcars)
mtcars$group -> NA
mtcars$group[mtcars$cyl > 4] -> 1
mtcars$group[mtcars$cyl <= 4] -> 2
t.test(mpg ~ group, data = mtcars)
mtcars$group <- NA
mtcars$group[mtcars$cyl > 4] <- 1
mtcars$group[mtcars$cyl <= 4] <- 2
t.test(mpg ~ group, data = mtcars)
data("mtcars")
a <- 1
class(a)
b <- c(1:3)
b <- c(-9:3)
b
q()
()
q()
datasets::USArrests
USArrests
rm(list = ls())
?lm
?USArrests
model <- lm(mpg ~ cyl, data = mtcars)
summary(model)
summary(model)$coefficients
summary(model)$coefficie
summary(model)$residuals
summary(model)$fitted.values
summary(model)$rank
summary(model)$call
l2 <- list(one= c(1:3), two = matrix(1:6, nrow = 2, ncol = 3), three = c("black", "white"))
l2$one[-2]
summary(model)$coeff
summary(model)[[“coefficients”]]
summary(model)[["coefficients"]]
summary(model)[["coefficie"]]
rm(list = ls())
x <- c(1:6)
x[6]   #by position
x[2:4]
x[c(3,5)]
x[c(-3, -5)]   #excluding
x[x<5]   #logical
x[c(TRUE, FALSE)]   #recycled
x[]   #returns all elements
m <- matrix(c(1:10,11,12), nrow = 4, ncol = 3)
m[2,]   #rows
m[,3]   #columns
m[2,3]   #both rows and columns
m[c(2,4), c(1,3)]
df <- mtcars
df[df$gear == 3, ]   #note we should use ==
df[df$cyl < 5 & df$am == 1,]  #do not forget the comma ,
df[c(1,3), c("mpg","wt")]
df$mpg[df$gear == 4]
d1 <- USArrests
d1["Maryland", "UrbanPop"] <- 76.6
states1 <- c("Colorado", "Florida", "Mississippi", "Wyoming")
states2 <- c("Nebraska", "Pennsylvania")
d1[states1, "UrbanPop"] <- d1[states1, "UrbanPop"] + 0.5
d1[states2, "UrbanPop"] <- d1[states2, "UrbanPop"] - 0.5
l1 <- list(c(1:3), matrix(1:6, nrow = 2, ncol = 3), c("black", "white"))
l1[2]   #returns a list
l1[[2]]    #returns a matrix, the object’s class
l1[[2]][2,]
model <- lm(mpg ~ cyl, data = mtcars)
summary(model)
summary(model)[["coefficients"]] #by name
summary(model)$coefficients
summary(model)$coeff #partial matching; shorthand for [[""]]
summary(model)$residuals
f1 <- function(x){
if (x > 3) {
print("a")
} else {
print("b")
}
}
f1(4)
y <- 10
f <- function(x) {
y <- 2
y*2 + g(x)
}
g <- function(x) {
x * y
}
f(3)
f <- function(x,y){
2*x
}
f(2)
se2 <- function(x){
v <- var(x)    #intermediate names
l <- length(x)
sqrt(v)/l   #returns value here
}
se2(df$mpg)
v <- function(x){
s <- (x - mean(x))^2
l <- length(x)-1
sum(s)/l
}
v(df$mpg)
var(df$mpg)
?qr
?sqrt
rm(list = ls())
library(mclust)
?clPairs
clPairs(iris[,1:4], cl = iris$Species)
setwd("~/Desktop/untitled folder/lec7")
rm(list = ls())
library(readr)
library(mclust)
concrete <- read_csv("concrete_slump_test.csv")
X <- concrete[, 2:8]
slump <- concrete$`SLUMP(cm)`
flow <- concrete$`FLOW(cm)`
comp <- concrete$`Compressive Strength (28-day)(Mpa)`
clPairs(X, cl = slump)
clPairs(X, slump)
clPairs(X, flow)
clPairs(X, comp)
View(concrete)
mc <- Mclust(X)
summary(mc)
BIC <-mclustBIC(X)
summary(BIC)
plot(BIC)
BIC_summary <- summary(BIC, data = X)
summary(BIC, data = X)$classification
X1 <- scale(concrete[, 2:9])
m1 <- Mclust(X1)
summary(m1)
BIC1 <-mclustBIC(X1)
summary(BIC1)
plot(BIC1)
BIC_summary <- summary(BIC1, data = X1)
summary(BIC1, data = X1)$classification
X2 <- scale(concrete[, c(2:8, 10)])
m2 <- Mclust(X2)
summary(m2)
BIC2 <-mclustBIC(X2)
summary(BIC2)
plot(BIC2)
BIC_summary <- summary(BIC2, data = X2)
summary(BIC2, data = X2)$classification
plot(fit, what = "BIC")
plot(m1, what = "BIC")
plot(BIC1)
plot(m1, what = "classification")
plot(m1, what = "density")
plot(BIC1)
BIC1
X1 <- scale(concrete[, 2:9])
m1 <- Mclust(X1)
summary(m1)
View(concrete)
BIC1 <-mclustBIC(X1)
summary(BIC1)
BIC_summary <- summary(BIC1, data = X1)
summary(BIC1, data = X1)$classification
summary(BIC1)
summary(BIC1, data = X1)
summary(BIC1, data = X1)$classification
BIC1 <- mclustBIC(X1)
BIC_summary <- summary(BIC1, data = X1)
summary(BIC1, data = X1)$classification
BIC1 <- mclustBIC(X1)
summary(BIC1)
BIC_summary <- summary(BIC1, data = X1)
#summary(BIC1, data = X1)$classification
summary(BIC1)
summary(BIC1, data = X1)
BIC1 <- mclustBIC(X1)
summary(BIC1)
BIC_summary <- summary(BIC1, data = X1)
#summary(BIC1, data = X1)$classification
summary(BIC1, data = X1)$classification
plot(m1, what = "BIC")
plot(m1, what = "BIC")
plot(m1, what = "BIC")
plot(m1, what = "classification")
plot(m1, what = "classification")
plot(m1, what = "classification")
plot(m1, what = "classification")
plot(m1, what = "density")
plot(m1, what = "density")
plot(m1, what = "classification")
plot(m1, what = "density")
plot(m1, what = "density")
X2 <- scale(concrete[, c(2:8, 10)])
m2 <- Mclust(X2)
summary(m2)
BIC2 <-mclustBIC(X2)
summary(BIC2)
BIC_summary <- summary(BIC2, data = X2)
summary(BIC2, data = X2)$classification
plot(m2, what = "BIC")
X3 <- scale(concrete[, c(2:8, 11)])
m3 <- Mclust(X3)
summary(m3)
BIC3 <-mclustBIC(X3)
summary(BIC3)
BIC_summary <- summary(BIC3, data = X3)
#summary(BIC3, data = X3)$classification
rm(list = ls())
shiny::runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo6/app')
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo4')
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo6/app')
setwd("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo6")
runApp('app')
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo4')
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo4')
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo4')
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo4')
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo5')
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo5')
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo4')
runApp()
install.packages("quanteda")
runApp()
runApp('/Volumes/GoogleDrive/My Drive/PROJECTS/Shiny/2016edx/2016-track-log')
runApp()
getwd()
rsconnect::setAccountInfo(name='yundai',
token='AC62B5C30269842C9B343AC8CBE3D53E',
secret='AJkXL4W8Ov5rTWbxqAQBZDvZUrotm3xxhGvAV5Ff')
rsconnect::deployApp("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo6")
rsconnect::setAccountInfo(name='yundai',
token='AC62B5C30269842C9B343AC8CBE3D53E',
secret='AJkXL4W8Ov5rTWbxqAQBZDvZUrotm3xxhGvAV5Ff')
rsconnect::deployApp("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo5")
rsconnect::setAccountInfo(name='yundai',
token='AC62B5C30269842C9B343AC8CBE3D53E',
secret='AJkXL4W8Ov5rTWbxqAQBZDvZUrotm3xxhGvAV5Ff')
rsconnect::deployApp("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo4")
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo4')
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo5')
getwd()
runApp('/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo4')
setwd("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo5")
rsconnect::setAccountInfo(name='yundai',
token='AC62B5C30269842C9B343AC8CBE3D53E',
secret='AJkXL4W8Ov5rTWbxqAQBZDvZUrotm3xxhGvAV5Ff')
rsconnect::deployApp("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo5")
getwd()
rsconnect::setAccountInfo(name='yundai',
token='AC62B5C30269842C9B343AC8CBE3D53E',
secret='AJkXL4W8Ov5rTWbxqAQBZDvZUrotm3xxhGvAV5Ff')
rsconnect::deployApp("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo5")
load("resource_day_sum")
View(resource_day_sum)
View(resource_day_sum)
resource_day_sum
rsconnect::setAccountInfo(name='yundai',
token='AC62B5C30269842C9B343AC8CBE3D53E',
secret='AJkXL4W8Ov5rTWbxqAQBZDvZUrotm3xxhGvAV5Ff')
rsconnect::deployApp("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo5")
source('~/.active-rstudio-document')
setwd("/Volumes/GoogleDrive/My Drive/websites/new web/data/r")
rm(list = ls())
load("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo4/map")
load("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo5/resource_day_sum")
load("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo6/local")
View(local)
rm(list = ls())
load("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo4/map")
load("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo5/resource_day_sum")
load("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample/demo6/local")
names(local)[2] <- "localhour"
View(local)
head(map)
head(local)
View(local)
head(local, 10)
head(local, 15)
getwd()
head(map)
runApp('sample/demo4')
runApp('sample/demo4')
runApp('sample/demo5')
runApp('sample/demo5')
library(readr)
read_csv("long.csv")
read_csv("sample/long.csv")
long <- read_csv("sample/long.csv")
library(tidyr)
?gather
?spread
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
View(stocks)
stocksm <- stocks %>% gather(stock, price, -time)
View(stocksm)
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
View(long)
long %>% spread(semester, gpa)
long %>% spread(course, gpa)
long %>% spread(course, attendance)
setwd("/Volumes/GoogleDrive/My Drive/websites/new web/data/r")
View(long)
library(data.table)
melt(long)
long
wide <- long %>% spread(key = course, value = gpa)
wide <- long %>% spread(key = course, value = gpa)
wide
wide2 <- long %>% spread(key = course, value = attendance)
wide2
wide3 <- long %>% spread(key = course, value = c(course, attendance))
wide2 <- long %>% spread(key = course, value = attendance)
wide2
wide1 <- long %>% spread(key = course, value = gpa)
wide1
wide3 <- long %>% spread(key = semester, value = course)
wide3
long1 <- wide1 %>% gather(key = course, value = gpa)
long1 <- wide1 %>% gather(key = course, value = gpa)
long1
wide1
long1
View(long1)
stocks <- tibble(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocks %>% gather(stock, price, -time)
wide1 %>% gather(key = gpa)
stocks %>% gather(stock, price, time)
stocks %>% gather(stock, price, -time)
wide1 %>% gather(course, gpa, -id, -semester, -attendance)
long1 <- wide1 %>% gather(course, gpa, -id, -semester, -attendance)
long1
long2 <- wide2 %>% gather(course, attendance, -id, -semester, -gpa)
long2
wide2 %>% gather(course, attendance)
long2 <- wide2 %>% gather(course, attendance, -id, -semester, -gpa, na.rm = T)
long2
DT <- data.table(
i_1 = c(1:5, NA),
i_2 = c(NA,6,7,8,9,10),
f_1 = factor(sample(c(letters[1:3], NA), 6, TRUE)),
f_2 = factor(c("z", "a", "x", "c", "x", "x"), ordered=TRUE),
c_1 = sample(c(letters[1:3], NA), 6, TRUE),
d_1 = as.Date(c(1:3,NA,4:5), origin="2013-09-01"),
d_2 = as.Date(6:1, origin="2012-01-01"))
DT
melt(DT, id=1:2, measure="f_1")
load("session")
setwd("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample")
?summarise
?tally
wide1 <- long %>% spread(key = course, value = gpa)
names(wide1)[4:5] <- c("courseA", "courseB")
wide1
setwd("/Volumes/GoogleDrive/My Drive/websites/new web/data/r")
wide2 <- long %>% spread(key = course, value = attendance)
names(wide2)[4:5] <- c("courseA", "courseB")
wide2
wide2 <- long %>% spread(key = course, value = attendance)
names(wide2)[4:5] <- c("courseA_attendance", "courseB_attendance")
wide2
wide1 %>% gather(key = course, value = gpa, id, -semester, -attendance)
wide1 %>% gather(key = course, value = gpa, id, semester, -attendance)
long
?gather
long %>% spread(key = course, value = c(gpa, attendance))
long %>% spread(key = c(course,semester), value = gpa)
DT
melt(DT, id=1:2, measure="f_1")
melt(DT, id=1:2, measure=3:4, value.factor=TRUE)
melt(DT, id=1:2, measure=3:4)
View(wide1)
melt(wide1, id=1, measure=4:5)
melt(wide1, id=1:2, measure=4:5)
melt(DT, id=3:4, measure=c("d_1", "d_2"))
DT
melt(wide1, id=1:3, measure=4:5)
wide1 %>% gather(key = course, value = gpa, -id, -semester, -attendance)
melt(wide1, id = c("id", "semester", "attendance"), measure = c("courseA", "courseB"))
melt(wide1, id = c("id", "semester", "attendance"), measure = c("courseA", "courseB"), na.rm = TRUE)
names(ChickWeight) <- tolower(names(ChickWeight))
DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table
DT
dcast(DT, time ~ variable, fun=mean)
dcast(DT, diet ~ variable, fun=mean)
dcast(DT, diet+chick ~ time, drop=FALSE)
dcast(long, id + semester + attendance ~ course, value.var = gpa)
dcast(long, id + semester + attendance ~ course, value.var = "gpa")
dcast(long, id + semester + gpa ~ course, value.var = "attendance")
dcast(long, id + semester + gpa ~ course, value.var = "attendance")
long %>% spread(key = course, value = attendance)
getwd()
wide1
melt(wide1, id = c("id", "semester", "attendance"), measure = c("courseA", "courseB"))
setwd("/Volumes/GoogleDrive/My Drive/websites/new web/data/r/sample")
save(wide1, file = "wide1")
save(wide2, file = "wide2")
melt(wide1, id = c("id", "semester", "attendance"), measure = c("courseA", "courseB"))
